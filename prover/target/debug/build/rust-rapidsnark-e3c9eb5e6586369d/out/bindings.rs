/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FullProverImpl {
    _unused: [u8; 0],
}
pub const ProverResponseType_SUCCESS: ProverResponseType = 0;
pub const ProverResponseType_ERROR: ProverResponseType = 1;
pub type ProverResponseType = ::std::os::raw::c_uint;
pub const FullProverState_OK: FullProverState = 0;
pub const FullProverState_ZKEY_FILE_LOAD_ERROR: FullProverState = 1;
pub const FullProverState_UNSUPPORTED_ZKEY_CURVE: FullProverState = 2;
pub type FullProverState = ::std::os::raw::c_uint;
pub const ProverError_NONE: ProverError = 0;
pub const ProverError_PROVER_NOT_READY: ProverError = 1;
pub const ProverError_INVALID_INPUT: ProverError = 2;
pub const ProverError_WITNESS_GENERATION_INVALID_CURVE: ProverError = 3;
pub type ProverError = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProverResponseMetrics {
    pub prover_time: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ProverResponseMetrics() {
    const UNINIT: ::std::mem::MaybeUninit<ProverResponseMetrics> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ProverResponseMetrics>(),
        4usize,
        concat!("Size of: ", stringify!(ProverResponseMetrics))
    );
    assert_eq!(
        ::std::mem::align_of::<ProverResponseMetrics>(),
        4usize,
        concat!("Alignment of ", stringify!(ProverResponseMetrics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prover_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProverResponseMetrics),
            "::",
            stringify!(prover_time)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct ProverResponse {
    pub type_: ProverResponseType,
    pub raw_json: *const ::std::os::raw::c_char,
    pub error: ProverError,
    pub metrics: ProverResponseMetrics,
}
extern "C" {
    #[link_name = "\u{1}__ZN14ProverResponse12empty_stringE"]
    pub static ProverResponse_empty_string: *const ::std::os::raw::c_char;
}
#[test]
fn bindgen_test_layout_ProverResponse() {
    const UNINIT: ::std::mem::MaybeUninit<ProverResponse> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ProverResponse>(),
        24usize,
        concat!("Size of: ", stringify!(ProverResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<ProverResponse>(),
        8usize,
        concat!("Alignment of ", stringify!(ProverResponse))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProverResponse),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_json) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ProverResponse),
            "::",
            stringify!(raw_json)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ProverResponse),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metrics) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ProverResponse),
            "::",
            stringify!(metrics)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN14ProverResponseC1E11ProverError"]
    pub fn ProverResponse_ProverResponse(this: *mut ProverResponse, _error: ProverError);
}
extern "C" {
    #[link_name = "\u{1}__ZN14ProverResponseC1EPKc21ProverResponseMetrics"]
    pub fn ProverResponse_ProverResponse1(
        this: *mut ProverResponse,
        _raw_json: *const ::std::os::raw::c_char,
        _metrics: ProverResponseMetrics,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN14ProverResponseD1Ev"]
    pub fn ProverResponse_ProverResponse_destructor(this: *mut ProverResponse);
}
impl ProverResponse {
    #[inline]
    pub unsafe fn new(_error: ProverError) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ProverResponse_ProverResponse(__bindgen_tmp.as_mut_ptr(), _error);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(
        _raw_json: *const ::std::os::raw::c_char,
        _metrics: ProverResponseMetrics,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        ProverResponse_ProverResponse1(__bindgen_tmp.as_mut_ptr(), _raw_json, _metrics);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        ProverResponse_ProverResponse_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct FullProver {
    pub impl_: *mut FullProverImpl,
    pub state: FullProverState,
}
#[test]
fn bindgen_test_layout_FullProver() {
    const UNINIT: ::std::mem::MaybeUninit<FullProver> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FullProver>(),
        16usize,
        concat!("Size of: ", stringify!(FullProver))
    );
    assert_eq!(
        ::std::mem::align_of::<FullProver>(),
        8usize,
        concat!("Alignment of ", stringify!(FullProver))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FullProver),
            "::",
            stringify!(impl_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FullProver),
            "::",
            stringify!(state)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNK10FullProver5proveEPKc"]
    pub fn FullProver_prove(
        this: *const FullProver,
        input: *const ::std::os::raw::c_char,
    ) -> ProverResponse;
}
extern "C" {
    #[link_name = "\u{1}__ZN10FullProverC1EPKc"]
    pub fn FullProver_FullProver(
        this: *mut FullProver,
        _zkeyFileName: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN10FullProverD1Ev"]
    pub fn FullProver_FullProver_destructor(this: *mut FullProver);
}
impl FullProver {
    #[inline]
    pub unsafe fn prove(&self, input: *const ::std::os::raw::c_char) -> ProverResponse {
        FullProver_prove(self, input)
    }
    #[inline]
    pub unsafe fn new(_zkeyFileName: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        FullProver_FullProver(__bindgen_tmp.as_mut_ptr(), _zkeyFileName);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        FullProver_FullProver_destructor(self)
    }
}
